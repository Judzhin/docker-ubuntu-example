worker_processes auto;
# Определяет количество рабочих процессов. Его лучше устанавливать в auto в новых версиях.
pid /run/nginx.pid;
pcre_jit on;

events {
    worker_connections 1024;
    # Устанавливает максимальное количество соединений одного рабочего процесса. Следует выбирать значения от 1024 до 4096.
    multi_accept on;
    # Будет принимать максимально возможное количество соединений
    use epoll;
}

http {
    log_format json '{"@version": "1","body_bytes_sent": $body_bytes_sent,"bytes_sent": $bytes_sent,"host": "$host","msec": "$msec","@timestamp": "$time_iso8601","status": $status,"remote_addr": "$remote_addr","request_id": "$request_id", "request_length": $request_length,"request_method": "$request_method","request_uri": "$request_uri","server_addr": "$server_addr","server_port": $server_port,"server_protocol": "$server_protocol","upstream_addr": "$upstream_addr", "upstream_bytes_received": "$upstream_bytes_received","upstream_response_time": "$upstream_response_time","upstream_status": $upstream_status,"upstream_connect_time": "$upstream_connect_time", "http_cf_connecting_ip": "$http_cf_connecting_ip", "http_user_agent": "$http_user_agent", "upstream_host": "$host"}';
    sendfile on;
    # Метод отправки данных sendfile более эффективен, чем стандартный метод read+write
    sendfile_max_chunk 100m;
    tcp_nodelay on;
    tcp_nopush on;
    # Будет отправлять заголовки и и начало файла в одном пакете
    # keepalive_timeout 75;
    keepalive_timeout 30;
    # Будет ждать 30 секунд перед закрытием keepalive соединения
    keepalive_requests 100;
    # Максимальное количество keepalive запросов от одного клиента
    types_hash_max_size 2048;
    server_tokens off;
    charset utf-8;
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /dev/stdout json;
    error_log /dev/stderr warn;
    client_header_timeout 30s;
    reset_timedout_connection on;
    # Если клиент перестал читать отвечать, Nginx будет сбрасывать соединение с ним
    # client_body_timeout 30s;
    client_body_timeout 10s;
    # Будет ждать 10 секунд тело запроса от клиента, после чего сбросит соединение
    # client_max_body_size 100m;
    client_max_body_size 1m;
    # В этом случае сервер не будет принимать запросы размером более 1Мб
    client_body_buffer_size 128K;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    # open_file_cache max=1000 inactive=30s;
    open_file_cache max=200000 inactive=20s;
    # Определяет максимальное количество файлов, информация о которых будет содержаться в кеше
    # open_file_cache_valid 45s;
    open_file_cache_valid 30s;
    # Определяет через какое время информация будет удалена из кеша
    open_file_cache_min_uses 2;
    # Будет кешировать информацию о тех файлах, которые были использованы хотя бы 2 раза
    # open_file_cache_errors off;
    open_file_cache_errors on;
    # Будет кешировать информацию об отсутствующих файлах
    fastcgi_read_timeout 300;
    # gzip off;
    gzip on;
    gzip_disable "msie6";
    gzip_types application/x-javascript text/css application/javascript text/javascript text/plain text/xml application/json application/vnd.ms-fontobject application/x-font-opentype application/x-font-truetype application/x-font-ttf application/xml font/eot font/opentype font/otf image/*;
    # Будет сжимать все файлы с перечисленными типами
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_min_length 500;
    http2_push_preload on;
    set_real_ip_from "0.0.0.0/0";
    real_ip_header X-Forwarded-For;
    real_ip_recursive on;
    include /etc/nginx/conf.d/*.conf;
}
